version: '3'
services:
  # MICROSERVICES

  basket-api:
    container_name: basket-api
    image: basket-api
    build:
      context: src/Basket.Api
    ports:
      - 8081:80
    networks:
      - observability-network
    depends_on:
      - redis

  orders-api:
    container_name: orders-api
    image: orders-api
    build:
      context: src/Orders.Api
    environment:
      - KAFKA__BOOTSTRAPSERVERS=kafka:29092
    ports:
      - 8082:80
    networks:
      - observability-network
    depends_on:
      - mongo
      - kafka

  orders-consumer:
    container_name: orders-consumer
    image: orders-consumer
    build:
      context: src/Orders.Consumer
    environment:
      - KAFKA__BOOTSTRAPSERVERS=kafka:29092
    networks:
      - observability-network
    depends_on:
      - mongo
      - kafka

  products-api:
    container_name: products-api
    image: products-api
    build:
      context: src/Products.Api
    ports:
      - 8083:80
    networks:
      - observability-network
    depends_on:
      - mssql

  users-idp:
    container_name: users-idp
    image: users-idp
    build:
      context: src/users.Idp
    ports:
      - 8084:80
    networks:
      - observability-network
    depends_on:
      - postgres

  # MONITORING SERVICES

  apm-server:
    container_name: apm-server
    image: docker.elastic.co/apm/apm-server:7.15.2
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ['CHOWN', 'DAC_OVERRIDE', 'SETGID', 'SETUID']
    cap_drop: ['ALL']
    ports:
      - 8200:8200
    networks:
      - observability-network
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    ports:
      - 9200:9200
    networks:
      - observability-network
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.15.2
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - observability-network
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  # DATABASES

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    ports:
      - 5432:5432
    networks:
      - observability-network

  mssql:
    image: 'mcr.microsoft.com/mssql/server'
    container_name: mssql
    environment:
      SA_PASSWORD: 'Dev@123456'
      ACCEPT_EULA: 'Y'
    ports:
      - 1433:1433
    networks:
      - observability-network

  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - 27017:27017
    networks:
      - observability-network

  redis:
    image: redis
    container_name: redis
    command: redis-server --requirepass redis --appendonly yes
    hostname: redis
    ports:
      - 6379:6379
    networks:
      - observability-network

  # MESSAGE BROKER

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - observability-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    networks:
      - observability-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafkadrop
    depends_on:
      - kafka
    ports:
      - 9000:9000
    networks:
      - observability-network
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

networks:
  observability-network:
    driver: bridge
